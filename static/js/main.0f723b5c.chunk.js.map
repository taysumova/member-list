{"version":3,"sources":["Form.js","Table.js","App.js","index.js"],"names":["CityList","props","rows","cities","map","city","index","react_default","a","createElement","key","value","name","onChange","handleChange","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","_e$target","target","setState","defineProperty","validation","test","email","phone","onFormSubmit","preventDefault","alert","handleSubmit","state","initialState","handleValidation","memberName","memberEmail","memberPhone","eventCity","refs","focus","_this$state","_this$validation","onSubmit","className","type","ref","placeholder","onBlur","required","onClick","Form_CityList","Component","TableHeader","MembersList","membersData","row","removeMember","Table","_this$props","editMemberInfo","Table_TableHeader","Table_MembersList","App","memberData","concat","toConsumableArray","editAd","formTitle","document","getElementsByTagName","formCity","formNumber","memberCity","console","log","filter","i","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","localStorage","hasOwnProperty","getItem","JSON","parse","setItem","stringify","src_Form","src_Table","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.0f723b5c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nconst CityList = (props) => {\r\n    const rows = props.cities.map((city, index) => {\r\n        return (\r\n            <option key={index} value={city}>{city}</option>\r\n        );\r\n    });\r\n    return <select name=\"eventCity\" onChange={props.handleChange}>{rows}</select>;\r\n}\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialState = {\r\n            memberName: '',\r\n            memberEmail: '',\r\n            memberPhone: '',\r\n            eventCity: ''\r\n        };\r\n\r\n        this.validation = {\r\n            name: true,\r\n            email: true,\r\n            phone: true\r\n        };\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refs.memberName.focus();\r\n    }\r\n\r\n    handleChange = e => {\r\n        const {name, value} = e.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n\r\n        let nameRegExp = /^[a-zа-яё\\s]+$/i,\r\n            emailRegExp = /^\\w{2,}[.-]?\\w{2,}@mail.ru$/,\r\n            phoneRegExp = /^\\+7\\([\\d]{3}\\)[\\d]{3}-[\\d]{4}$/i;\r\n\r\n        if(name === \"memberName\") {\r\n            this.validation.name = !nameRegExp.test(value) ? false : true;\r\n        } else if (name === \"memberEmail\") {\r\n            this.validation.email = !emailRegExp.test(value) ? false : true;\r\n        } else if (name === \"memberPhone\") {\r\n            this.validation.phone = !phoneRegExp.test(value) ? false : true;\r\n        }\r\n    };\r\n\r\n    onFormSubmit = e => {\r\n        e.preventDefault();\r\n        if(this.validation.name && this.validation.phone && this.validation.email) {\r\n            alert(\"Участник добавлен\");\r\n            this.props.handleSubmit(this.state);\r\n            this.setState(this.initialState);\r\n        } else {\r\n            alert(\"Заполните корректно поля\");\r\n        }\r\n    };\r\n\r\n    handleValidation = e => {\r\n        const {name} = e.target;\r\n        let nameRegExp = /^[a-zа-яё\\s]{2,}$/i,\r\n            emailRegExp = /^\\w{2,}[.-]?\\w{2,}@mail.ru$/,\r\n            phoneRegExp = /^\\+7\\([\\d]{3}\\)[\\d]{3}-[\\d]{4}$/i;\r\n\r\n        if(name === \"memberName\") {\r\n            this.validation.name = !nameRegExp.test(this.state.memberName) ? false : true;\r\n        } else if (name === \"memberEmail\") {\r\n            this.validation.email = !emailRegExp.test(this.state.memberEmail) ? false : true;\r\n        } else if (name === \"memberPhone\") {\r\n            this.validation.phone = !phoneRegExp.test(this.state.memberPhone) ? false : true;\r\n        }\r\n    };\r\n    /*form will consist from number(autocomplete) and image download*/\r\n\r\n    render() {\r\n        const {memberName, memberEmail, memberPhone} = this.state;\r\n        const {name, email, phone} = this.validation;\r\n\r\n        return (\r\n            <form onSubmit={this.onFormSubmit}>\r\n                <fieldset>\r\n                    <legend>Добавить участника в группу</legend>\r\n                    <label>ФИО</label>\r\n                    <span className=\"error\">\r\n                        {name ? \"\" : \"Имя должно содержать только буквы\"}\r\n                    </span>\r\n                    <input\r\n                        type=\"text\"\r\n                        ref=\"memberName\"\r\n                        name=\"memberName\"\r\n                        placeholder=\"Иванов Иван Иванович\"\r\n                        value={memberName}\r\n                        onBlur={this.handleValidation}\r\n                        onChange={this.handleChange}\r\n                        required/>\r\n                    <label>Email</label>\r\n                    <span className=\"error\">\r\n                        {email ? \"\" : \"Некорректный формат e-mail\"}\r\n                    </span>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"memberEmail\"\r\n                        placeholder=\"mymail@mail.ru\"\r\n                        value={memberEmail}\r\n                        onBlur={this.handleValidation}\r\n                        onChange={this.handleChange}\r\n                        required/>\r\n                    <label>Телефон</label>\r\n                    <span className=\"error\">\r\n                        {phone ? \"\" : \"Некорректный формат номера\"}\r\n                    </span>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"memberPhone\"\r\n                        placeholder=\"+7(000)000-0000\"\r\n                        value={memberPhone}\r\n                        onClick={this.handleValidation}\r\n                        onChange={this.handleChange}\r\n                        required/>\r\n                    <label>Город для участия</label>\r\n                    <CityList cities={this.props.cities}\r\n                              handleChange={this.handleChange}/>\r\n                    {/*<input type=\"file\"/>*/}\r\n                    <button type=\"submit\" className=\"submit-btn\">\r\n                        Добавить\r\n                    </button>\r\n                </fieldset>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <h3>Участники:</h3>\r\n    );\r\n}\r\n\r\nconst MembersList = props => {\r\n    const rows = props.membersData.map((row, index) => {\r\n        return (\r\n            <article key={index} className=\"member\">\r\n                <h4>{row.memberName}</h4>\r\n                <p>{row.eventCity}</p>\r\n                <span className=\"number\">{row.memberPhone}</span>\r\n                <div className=\"btn-wrapper\">\r\n                    {/*<button onClick={() => props.editMemberInfo(index)} className=\"edit-btn\">&#128393;</button>*/}\r\n                    <button onClick={() => props.removeMember(index)} className=\"delete-btn\">&#128500;\r\n                    </button>\r\n                </div>\r\n            </article>\r\n        );\r\n    });\r\n\r\n\r\n    return <div>{rows}</div>;\r\n}\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        const {membersData, editMemberInfo, removeMember} = this.props;\r\n\r\n        return (\r\n            <section>\r\n                <TableHeader/>\r\n                <MembersList membersData={membersData} editMemberInfo={editMemberInfo} removeMember={removeMember}/>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;\r\n","import React, {Component} from 'react';\r\nimport Form from './Form.js';\r\nimport Table from './Table.js';\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            membersData: [],\r\n            cities: [\"Москва\", \"Санкт-Петербург\", \"Екатеринбург\", \"Нижний Новгород\", \"Новосибирск\", \"Казань\", \"Челябинск\", \"Омск\", \"Самара\", \"Ростов-на-Дону\"]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.hydrateStateWithLocalStorage();\r\n\r\n        // add event listener to save state to localStorage\r\n        // when user leaves/refreshes the page\r\n        window.addEventListener(\r\n            \"beforeunload\",\r\n            this.saveStateToLocalStorage.bind(this)\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\r\n            \"beforeunload\",\r\n            this.saveStateToLocalStorage.bind(this)\r\n        );\r\n\r\n        // saves if component has a chance to unmount\r\n        this.saveStateToLocalStorage();\r\n    }\r\n\r\n    hydrateStateWithLocalStorage() {\r\n        // for all items in state\r\n        for (let key in this.state) {\r\n            // if the key exists in localStorage\r\n            if (localStorage.hasOwnProperty(key)) {\r\n                // get the key's value from localStorage\r\n                let value = localStorage.getItem(key);\r\n\r\n                // parse the localStorage string and setState\r\n                try {\r\n                    value = JSON.parse(value);\r\n                    this.setState({[key]: value});\r\n                } catch (e) {\r\n                    // handle empty string\r\n                    this.setState({[key]: value});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    saveStateToLocalStorage() {\r\n        // for every item in React state\r\n        for (let key in this.state) {\r\n            // save to localStorage\r\n            localStorage.setItem(key, JSON.stringify(this.state[key]));\r\n        }\r\n    }\r\n\r\n    handleSubmit = memberData => {\r\n        this.setState({membersData: [...this.state.membersData, memberData]});\r\n    }\r\n\r\n    editAd = index => {\r\n        const {membersData} = this.state;\r\n        const formTitle = document.getElementsByTagName('input')[0];\r\n        const formCity = document.getElementsByTagName('input')[1];\r\n        const formNumber = document.getElementsByTagName('input')[2];\r\n        formTitle.value = membersData[index].memberName;\r\n        formCity.value = membersData[index].memberCity;\r\n        formNumber.value = membersData[index].memberPhone;\r\n        console.log(membersData[index]);\r\n        formTitle.focus();\r\n    }\r\n\r\n    removeMember = index => {\r\n        const {membersData} = this.state;\r\n\r\n        this.setState({\r\n            membersData: membersData.filter((memberData, i) => {\r\n                return i !== index;\r\n            })\r\n        });\r\n\r\n        console.log(this.cities);\r\n    }\r\n\r\n    render() {\r\n        const {membersData, cities} = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <Form handleSubmit={this.handleSubmit}\r\n                      membersData={membersData}\r\n                      cities={cities}\r\n                />\r\n                <Table editMemberInfo={this.editMemberInfo}\r\n                       removeMember={this.removeMember}\r\n                       membersData={membersData}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}